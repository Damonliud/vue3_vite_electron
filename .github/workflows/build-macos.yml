# .github/workflows/build-macos.yml

name: Build macOS Electron App # 工作流程的名称，会在 GitHub Actions 界面显示

on: # 定义触发工作流程的事件
  push:
    branches: [main] # 当代码推送到 main 分支时触发
  pull_request:
    branches: [main] # 当有拉取请求到 main 分支时触发

jobs: # 定义一个或多个作业 (jobs)
  build_macos: # 作业的 ID
    name: Build for macOS # 作业的名称
    runs-on: macos-latest # 关键：指定在最新的 macOS 虚拟机上运行此作业

    steps: # 作业中要执行的步骤
      - name: Checkout code # 步骤名称：拉取代码
        uses: actions/checkout@v4 # 使用 GitHub Actions 官方提供的 checkout action

      - name: Setup Node.js # 步骤名称：设置 Node.js 环境
        uses: actions/setup-node@v4 # 使用 Node.js setup action
        with:
          node-version: '22' # 指定 Node.js 版本，确保与你的项目兼容 (例如 20.x LTS)
          cache: 'npm' # 缓存 npm 依赖，加快后续构建速度

      - name: Install dependencies # 步骤名称：安装项目依赖
        run: npm install # 或者 yarn install，取决于你的项目使用的包管理器

      # --- 前端构建 (如果你的 Electron 应用需要先构建前端) ---
      # 如果你的 Electron 应用是基于 Vue/React 等前端框架，并且需要先运行 npm run build
      # 那么在这里添加前端构建步骤
      - name: Build frontend (if applicable) # 步骤名称：构建前端
        run: npm run build # 或者 yarn build，如果你的 package.json 中有这个脚本
        # 如果你的前端构建输出在 dist 目录，并且 Electron 主进程会加载这个 dist 目录

      # --- Electron 打包 ---
      - name: Build Electron App for macOS # 步骤名称：打包 Electron 应用
        # 这里根据你使用的打包工具选择命令：
        # 如果你使用 Electron Forge (根据你最新的 forge.config.js)，则运行 make
        run: npm run make # --platform=darwin 明确指定打包 macOS
        # 如果你使用 Electron Builder (根据你之前的 package.json build 字段)，则运行 electron:build
        # run: npm run electron:build -- --mac # Electron Builder 的 macOS 打包命令

      # --- 代码签名和公证 (强烈推荐，但需要 Apple 开发者账号和证书) ---
      # 这一步是可选的，但对于分发到非开发者用户非常重要。
      # 需要在 GitHub 仓库的 Settings -> Secrets and variables -> Actions -> New repository secret 中
      # 添加以下秘密变量：
      # APPLE_ID: 你的 Apple ID 邮箱
      # APPLE_APP_SPECIFIC_PASSWORD: 你的 Apple ID 的应用专用密码 (不是普通密码)
      # APPLE_CERTIFICATE_BASE64: 你的 macOS 开发者证书 (.p12 或 .pfx) 的 Base64 编码
      # APPLE_CERTIFICATE_PASSWORD: 你的证书密码
      #
      # - name: Set up code signing credentials
      #   run: |
      #     echo "${{ secrets.APPLE_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
      #     # 设置环境变量供 Electron Forge/Builder 使用
      #     echo "CSC_LINK=certificate.p12" >> $GITHUB_ENV
      #     echo "CSC_KEY_PASSWORD=${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" >> $GITHUB_ENV
      #     echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
      #     echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV
      #   shell: bash # 确保在 macOS runner 上使用 bash
      #   if: ${{ secrets.APPLE_CERTIFICATE_BASE64 != '' }} # 只有当秘密变量存在时才执行

      # - name: Notarize and sign (if applicable)
      #   # 这一步通常集成在 Electron Forge/Builder 的打包命令中，
      #   # 或者在打包后单独执行一个公证命令。
      #   # 具体命令取决于你的 forge.config.js 或 package.json 配置。
      #   # 例如，Electron Forge 的 maker-dmg 和 maker-squirrel 内部可以配置签名。
      #   # Electron Builder 也有自己的 code-signing 配置。
      #   run: |
      #     # 示例：如果你的打包工具会自动处理签名和公证
      #     npm run make -- --platform=darwin # 或 npm run electron:build -- --mac
      #   if: ${{ secrets.APPLE_CERTIFICATE_BASE64 != '' }}

      - name: Upload macOS artifact # 步骤名称：上传构建产物
        uses: actions/upload-artifact@v4 # 使用 GitHub Actions 官方提供的 upload-artifact action
        with:
          name: macos-app # 产物的名称
          path: out/make/**/*.dmg # 指定要上传的文件路径，Electron Forge 通常输出到 out/make 目录
          # 如果是 Electron Builder，路径可能是 dist_electron/**/*.dmg
